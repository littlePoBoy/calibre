# Form implementation generated from reading ui file 'D:\pyprojects\calibre\src\calibre\gui2\dialogs\tag_list_editor.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_TagListEditor(object):
    def setupUi(self, TagListEditor):
        TagListEditor.setObjectName("TagListEditor")
        TagListEditor.resize(688, 335)
        icon = QtGui.QIcon.ic("chapters.png")
        TagListEditor.setWindowIcon(icon)
        self.verticalLayout = QtWidgets.QVBoxLayout(TagListEditor)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setFieldGrowthPolicy(QtWidgets.QFormLayout.FieldGrowthPolicy.ExpandingFieldsGrow)
        self.formLayout.setObjectName("formLayout")
        self.label = QtWidgets.QLabel(parent=TagListEditor)
        self.label.setObjectName("label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.label)
        self.widget = QtWidgets.QWidget(parent=TagListEditor)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.search_box = HistoryLineEdit(parent=self.widget)
        self.search_box.setMinimumSize(QtCore.QSize(200, 0))
        self.search_box.setClearButtonEnabled(True)
        self.search_box.setObjectName("search_box")
        self.horizontalLayout.addWidget(self.search_box)
        self.search_button = QtWidgets.QPushButton(parent=self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.search_button.sizePolicy().hasHeightForWidth())
        self.search_button.setSizePolicy(sizePolicy)
        icon1 = QtGui.QIcon.ic("search.png")
        self.search_button.setIcon(icon1)
        self.search_button.setObjectName("search_button")
        self.horizontalLayout.addWidget(self.search_button)
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.widget)
        self.label1 = QtWidgets.QLabel(parent=TagListEditor)
        self.label1.setObjectName("label1")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.label1)
        self.widget_2 = QtWidgets.QWidget(parent=TagListEditor)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.filter_box = HistoryLineEdit(parent=self.widget_2)
        self.filter_box.setMinimumSize(QtCore.QSize(200, 0))
        self.filter_box.setClearButtonEnabled(True)
        self.filter_box.setObjectName("filter_box")
        self.horizontalLayout_2.addWidget(self.filter_box)
        self.filter_button = QtWidgets.QPushButton(parent=self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.filter_button.sizePolicy().hasHeightForWidth())
        self.filter_button.setSizePolicy(sizePolicy)
        icon2 = QtGui.QIcon.ic("filter.png")
        self.filter_button.setIcon(icon2)
        self.filter_button.setObjectName("filter_button")
        self.horizontalLayout_2.addWidget(self.filter_button)
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.widget_2)
        self.horizontalLayout_3.addLayout(self.formLayout)
        self.show_button_layout = QtWidgets.QVBoxLayout()
        self.show_button_layout.setObjectName("show_button_layout")
        self.apply_all_checkbox = QtWidgets.QRadioButton(parent=TagListEditor)
        self.apply_all_checkbox.setObjectName("apply_all_checkbox")
        self.show_button_layout.addWidget(self.apply_all_checkbox)
        self.apply_vl_checkbox = QtWidgets.QRadioButton(parent=TagListEditor)
        self.apply_vl_checkbox.setObjectName("apply_vl_checkbox")
        self.show_button_layout.addWidget(self.apply_vl_checkbox)
        self.apply_selection_checkbox = QtWidgets.QRadioButton(parent=TagListEditor)
        self.apply_selection_checkbox.setObjectName("apply_selection_checkbox")
        self.show_button_layout.addWidget(self.apply_selection_checkbox)
        self.horizontalLayout_3.addLayout(self.show_button_layout)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.delete_button = QtWidgets.QToolButton(parent=TagListEditor)
        icon3 = QtGui.QIcon.ic("trash.png")
        self.delete_button.setIcon(icon3)
        self.delete_button.setIconSize(QtCore.QSize(32, 32))
        self.delete_button.setObjectName("delete_button")
        self.verticalLayout_2.addWidget(self.delete_button)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)
        self.rename_button = QtWidgets.QToolButton(parent=TagListEditor)
        icon4 = QtGui.QIcon.ic("edit_input.png")
        self.rename_button.setIcon(icon4)
        self.rename_button.setIconSize(QtCore.QSize(32, 32))
        self.rename_button.setObjectName("rename_button")
        self.verticalLayout_2.addWidget(self.rename_button)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem2)
        self.undo_button = QtWidgets.QToolButton(parent=TagListEditor)
        icon5 = QtGui.QIcon.ic("edit-undo.png")
        self.undo_button.setIcon(icon5)
        self.undo_button.setIconSize(QtCore.QSize(32, 32))
        self.undo_button.setObjectName("undo_button")
        self.verticalLayout_2.addWidget(self.undo_button)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem3)
        self.horizontalLayout_4.addLayout(self.verticalLayout_2)
        self.widget_3 = QtWidgets.QWidget(parent=TagListEditor)
        self.widget_3.setObjectName("widget_3")
        self.central_layout = QtWidgets.QVBoxLayout(self.widget_3)
        self.central_layout.setContentsMargins(0, 0, 0, 0)
        self.central_layout.setObjectName("central_layout")
        self.horizontalLayout_4.addWidget(self.widget_3)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.buttonBox = QtWidgets.QDialogButtonBox(parent=TagListEditor)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.StandardButton.Cancel|QtWidgets.QDialogButtonBox.StandardButton.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.verticalLayout.addWidget(self.buttonBox)
        self.label.setBuddy(self.search_box)
        self.label1.setBuddy(self.filter_box)

        self.retranslateUi(TagListEditor)
        self.buttonBox.accepted.connect(TagListEditor.accept) # type: ignore
        self.buttonBox.rejected.connect(TagListEditor.reject) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(TagListEditor)

    def retranslateUi(self, TagListEditor):

        TagListEditor.setWindowTitle(_("Category editor"))
        self.label.setText(_("&Search for:"))
        self.search_box.setToolTip(_("Search for an item in the first column"))
        self.search_button.setToolTip(_("Find items containing the search string"))
        self.search_button.setText(_("S&earch"))
        self.label1.setText(_("&Filter by:"))
        self.filter_box.setToolTip(_("Filter items using the text in this box"))
        self.filter_button.setToolTip(_("Show only items containing this text"))
        self.filter_button.setText(_("F&ilter"))
        self.apply_all_checkbox.setText(_("Show &all items"))
        self.apply_vl_checkbox.setToolTip(_("<p>Show items only if they appear in the\n"
"             current Virtual library. Edits already done may be hidden but will\n"
"             not be forgotten.\n"
"             </p><p>\n"
"             Note that this box affects only what is displayed. Changes\n"
"             will affect all books in your library even if this box\n"
"             is checked.</p>"))
        self.apply_vl_checkbox.setText(_("Only show items in the current &Virtual library"))
        self.apply_selection_checkbox.setToolTip(_("<p>Show items only if they appear in the\n"
"             currently selected books. Edits already done may be hidden but will\n"
"             not be forgotten.\n"
"             </p><p>\n"
"             Note that this box affects only what is displayed. Changes\n"
"             will affect all books in your library even if this box\n"
"             is checked.</p>"))
        self.apply_selection_checkbox.setText(_("O&nly show items in the currently selected books"))
        self.delete_button.setToolTip(_("<p>Delete selected items from the database.\n"
"                This will unapply the items from all books and then remove them\n"
"                from the database. This button\'s shortcut is Ctrl+D</p>"))
        self.delete_button.setText(_("..."))
        self.delete_button.setShortcut(_("Ctrl+D"))
        self.rename_button.setToolTip(_("<p>Edit the currently selected cell. If a tag is edited then it is renamed\n"
"                in every book where it is used. Double-clicking and pressing the edit\n"
"                key also work. This button\'s shortcut is Ctrl+E</p>"))
        self.rename_button.setText(_("..."))
        self.rename_button.setShortcut(_("Ctrl+E"))
        self.undo_button.setToolTip(_("<p>Undo all deletes or edits on the selected lines.\n"
"                This button\'s shortcut is Ctrl+U</p>\n"
"        "))
        self.undo_button.setText(_("..."))
        self.undo_button.setShortcut(_("Ctrl+U"))
from calibre.gui2.widgets import HistoryLineEdit
